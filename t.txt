if not string:
        return 0
    else:
        return 1 + rec_len(string[1:])



##linear
if index == len(arr):
        return -1
    
    if arr[index] == target:
        return index 
  
    return linear_search_recursive(arr, target, index + 1)



##binary
    def binary_search_recursive(arr, target, low, high):
      if low > high:
        return -1
      
      mid = (low + high) // 2
      
      if arr[mid] == target:
        return mid
      elif arr[mid] < target:
        return binary_search_recursive(arr, target, mid + 1, high)
      else:
        return binary_search_recursive(arr, target, low, mid - 1)

##merge
def merge_sort_recursive(arr):
  if len(arr) <= 1:
    return arr
  
  mid = len(arr) // 2
  left_half = arr[:mid]
  right_half = arr[mid:]
  
  left_half = merge_sort_recursive(left_half)
  right_half = merge_sort_recursive(right_half)
  
  return merge(left_half, right_half)

def merge(left_half, right_half):
  merged = []
  i = j = 0
  
  while i < len(left_half) and j < len(right_half):
    if left_half[i] < right_half[j]:
      merged.append(left_half[i])
      i += 1
    else:
      merged.append(right_half[j])
      j += 1
  
  while i < len(left_half):
    merged.append(left_half[i])
    i += 1
  
  while j < len(right_half):
    merged.append(right_half[j])
    j += 1
  
  return merged